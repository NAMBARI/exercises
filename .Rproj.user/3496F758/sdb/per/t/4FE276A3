{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Day 1\"\nauthor: \"Your Name\"\ndate: \"June 19, 2017\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## R Markdown\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r cars}\nsummary(cars)\n```\n\n## Including Plots\n\nYou can also embed plots, for example:\n\n```{r pressure, echo=FALSE}\nplot(pressure)\n```\n\nNote that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n\n\n\n\n\n## Day 1 - First Practice Exercise\n\n### Background\n\nThe exponential distribution is defined by its cumulative distribution function\n$$F(x) = 1-e^{-\\lambda x}$$\n\nThe R function ***rexp()*** generates random variables with an exponential distribution. For example \n<center>**rexp(n=10, rate=5)** </center>\n\nresults in 10 exponentially distributed numbers with a rate $\\lambda=5$. If you leave out the 5 and just have\n<center>**rexp(n=10)** </center>\nthen this results in 10 exponentially distributed numbers with a rate $\\lambda=1$, this is also referred to as the \"standard exponential distribution\". \n\n### Part 1\n\n\n1. Generate 200 random values from the standard exponential distribution and store them in a vector `exp.draws.1`.  Find the mean and standard deviation of `exp.draws.1`.\n\n2. Repeat, but change the rate to 0.2, 5, 7.3 and 10, storing the results in vectors called  `exp.draws.0.2`,  `exp.draws.5`,  `exp.draws.7.3` and  `exp.draws.10`. \n\n3. The function `plot()` is the generic function in R for the visual display of data. `hist()` is a function that takes in and bins data as a side effect. To use this function, we must first specify what we'd like to plot.\n    a. Use the `hist()` function to produce a histogram of your standard exponential distribution. \n    b. Use `plot()` with this vector to display the random values from your standard distribution in order.\n    c. Now, use `plot()` with two arguments -- any two of your other stored random value vectors -- to create a scatterplot of the two vectors against each other.\n\n4. We'd now like to compare the properties of each of our vectors. Begin by creating a vector of the means of each of our five distributions in the order we created them and saving this to a variable name of your choice. Using this and other similar vectors, create the following scatterplots and explain in words what is going on:\n    a. The five means versus the five rates used to generate the distribution.\n    b. The standard deviations versus the rates.\n    c. The means versus the standard deviations.\n\nFor each plot, explain in words what's going on.\n\n### Part II\n\n\n5. R's capacity for data and computation is large to what was available 10 years ago. \n    a. To show this, generate 1.1 million numbers from the standard exponential distribution and store them in a vector called `big.exp.draws.1`. Calculate the mean and standard deviation.\n    b. Plot a histogram of `big.exp.draws.1`.  Does it match the function $1-e^{-x}$?  Should it? \n    c. Find the mean of all of the entries in `big.exp.draws.1` which are strictly greater than 1. You may need to first create a new vector to identify which elements satisfy this.\n    d. Create a matrix, `big.exp.draws.1.mat`, containing the the values in \n`big.exp.draws.1`, with 1100 rows and 1000 columns. Use this matrix as the input to the `hist()` function and save the result to a variable of your choice. What happens to your data?\n    e. Calculate the mean of the 371st column of `big.exp.draws.1.mat`.\n    f. Now, find the means of all 1000 columns of `big.exp.draws.1.mat` simultaneously. Plot the histogram of column means.  Explain why its shape does not match the histogram in problem 5b).\n   \n\n### Part III\n\n\n\n## Part 1\n6. The data set at `rnf6080.dat` records hourly rainfall at a certain location in Canada, every day from 1960 to 1980.\n    a. First, we need to load the data set into R using the command `read.table()`. Use the help function to learn what arguments this function takes. Once you have the necessary input, load the data set into R and make it a data frame called `rain.df`.\n    b. How many rows and columns does `rain.df` have? (If there are not 5070 rows and 27 columns, something is wrong; check the previous part to see what might have gone wrong in the previous part.)\n    c. What are the names of the columns of `rain.df`?\n    d. What is the value of row 5, column 7 of `rain.df`?\n    e. Display the second row of `rain.df` in its entirety.\n    f. Explain what this command does:\n    ```\n  names(rain.df) <- c(\"year\",\"month\",\"day\",seq(0,23))\n    ```\nby running it on your data and examining the object. (You may find the display functions `head()` and `tail()` useful here.) Is it clear now what the last 24 columns represent?\n    g. Create a new column in the data frame called `daily`, which is the sum of the rightmost 24 columns. With this column, create a histogram of the values in this column, which are supposed to be daily rainfall values. What is wrong with this picture?  \n    h. Create a new data frame `rain.df.fixed` that takes the original and fixes it for the apparent flaw you have discovered. Having done this, produce a new histogram with the corrected data and explain why this is more reasonable.\n\n",
    "created" : 1497280021099.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1692425951",
    "id" : "4FE276A3",
    "lastKnownWriteTime" : 1497280711,
    "last_content_update" : 1497280711728,
    "path" : "C:/Users/adam_/Dropbox (Personal)/Brown/NAMBARI/R Course/Exercises/Day1.Rmd",
    "project_path" : "Day1.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}