{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Day 3\"\nauthor: \"Your Name\"\ndate: \"June 21, 2017\"\noutput: html_document\n---\n\n# Many models\n\n## Introduction\n\nIn this practice you're going to learn three powerful ideas that help you to work with large numbers of models with ease:\n\n1.  Using many simple models to better understand complex datasets.\n\n2.  Using list-columns to store arbitrary data structures in a data frame.\n    For example, this will allow you to have a column that contains linear \n    models.\n   \n3.  Using the __broom__ package, by David Robinson, to turn models into tidy \n    data. This is a powerful technique for working with large numbers of models\n    because once you have tidy data, you can apply all of the techniques that \n    you've learned about earlier in the book.\n\nWe'll start by diving into a motivating example using data about life expectancy around the world. It's a small dataset but it illustrates how important modelling can be for improving your visualisations. We'll use a large number of simple models to partition out some of the strongest signal so we can see the subtler signals that remain. We'll also see how model summaries can help us pick out outliers and unusual trends.\n\nThe following sections will dive into more detail about the individual techniques:\n\n1. In [list-columns], you'll learn more about the list-column data structure,\n   and why it's valid to put lists in data frames.\n   \n2. In [creating list-columns], you'll learn the three main ways in which you'll\n   create list-columns.\n   \n3. In [simplifying list-columns] you'll learn how to convert list-columns back\n   to regular atomic vectors (or sets of atomic vectors) so you can work\n   with them more easily.\n   \n4. In [making tidy data with broom], you'll learn about the full set of tools\n   provided by broom, and see how they can be applied to other types of \n   data structure.\n\nThis practice is somewhat aspirational: if this book is your first introduction to R, this practice is likely to be a struggle. It requires you have to deeply internalised ideas about modelling, data structures, and iteration. So don't worry if you don't get it --- just put this practice aside for a few months, and come back when you want to stretch your brain. \n\n### Prerequisites\n\nWorking with many models requires many of the packages of the tidyverse (for data exploration, wrangling, and programming) and modelr to facilitate modelling.\n\n```{r setup, message = FALSE}\nlibrary(modelr)\nlibrary(tidyverse)\n```\n\n## gapminder\n\nTo motivate the power of many simple models, we're going to look into the \"gapminder\" data. This data was popularised by Hans Rosling, a Swedish doctor and statistician. If you've never heard of him, stop reading this practice right now and go watch one of his videos! He is a fantastic data presenter and illustrates how you can use data to present a compelling story. A good place to start is this short video filmed in conjunction with the BBC: <https://www.youtube.com/watch?v=jbkSRLYSojo>.\n\nThe gapminder data summarises the progression of countries over time, looking at statistics like life expectancy and GDP. The data is easy to access in R, thanks to Jenny Bryan who created the gapminder package:\n\n```{r}\nlibrary(gapminder)\ngapminder\n```\n\nIn this case study, we're going to focus on just three variables to answer the question \"How does life expectancy (`lifeExp`) change over time (`year`) for each country (`country`)?\". A good place to start is with a plot:\n\n```{r}\ngapminder %>% \n  ggplot(aes(year, lifeExp, group = country)) +\n    geom_line(alpha = 1/3)\n```\n\nThis is a small dataset: it only has ~1,700 observations and 3 variables. But it's still hard to see what's going on! Overall, it looks like life expectancy has been steadily improving. However, if you look closely, you might notice some countries that don't follow this pattern. How can we make those countries easier to see?\n\n\nYou already know how to do that if we had a single country:\n\n```{r, out.width = \"33%\", fig.asp = 1, fig.width = 3, fig.align='default'}\nkenya <- filter(gapminder, country == \"Kenya\") \n  kenya %>%\n  ggplot(aes(year, lifeExp)) + \n  geom_line() + \n  ggtitle(\"Full data = \")\n\nkenya_mod <- lm(lifeExp ~ year, data = kenya)\nkenya %>% \n  add_predictions(kenya_mod) %>%\n  ggplot(aes(year, pred)) + \n  geom_line() + \n  ggtitle(\"Linear trend + \")\n\nkenya %>% \n  add_residuals(kenya_mod) %>% \n  ggplot(aes(year, resid)) + \n  geom_hline(yintercept = 0, colour = \"white\", size = 3) + \n  geom_line() + \n  ggtitle(\"Remaining pattern\")\n```\n\nHow can we easily fit that model to every country?\n\n### Nested data\n\nYou could imagine copy and pasting that code multiple times; but you've already learned a better way! Extract out the common code with a function and repeat using a map function from purrr. This problem is structured a little differently to what you've seen before. Instead of repeating an action for each variable, we want to repeat an action for each country, a subset of rows. To do that, we need a new data structure: the __nested data frame__. To create a nested data frame we start with a grouped data frame, and \"nest\" it:\n\n```{r}\nby_country <- gapminder %>% \n  group_by(country, continent) %>% \n  nest()\n\nby_country\n```\n\n(I'm cheating a little by grouping on both `continent` and `country`. Given `country`, `continent` is fixed, so this doesn't add any more groups, but it's an easy way to carry an extra variable along for the ride.)\n\nThis creates an data frame that has one row per group (per country), and a rather unusual column: `data`. `data` is a list of data frames (or tibbles, to be precise).  This seems like a crazy idea: we have a data frame with a column that is a list of other data frames! I'll explain shortly why I think this is a good idea.\n\nThe `data` column is a little tricky to look at because it's a moderately complicated list, and we're still working on good tools to explore these objects. Unfortunately using `str()` is not recommended as it will often produce very long output. But if you pluck out a single element from the `data` column you'll see that it contains all the data for that country (in this case, Afghanistan).\n\n```{r}\nby_country$data[[1]]\n```\n\nNote the difference between a standard grouped data frame and a nested data frame: in a grouped data frame, each row is an observation; in a nested data frame, each row is a group. Another way to think about a nested dataset is we now have a meta-observation: a row that represents the complete time course for a country, rather than a single point in time.\n\n### List-columns\n\nNow that we have our nested data frame, we're in a good position to fit some models. We have a model-fitting function:\n\n```{r}\ncountry_model <- function(df) {\n  lm(lifeExp ~ year, data = df)\n}\n```\n\nAnd we want to apply it to every data frame. The data frames are in a list, so we can use `purrr::map()` to apply `country_model` to each element:\n\n```{r}\nmodels <- map(by_country$data, country_model)\n```\n\nHowever, rather than leaving the list of models as a free-floating object, I think it's better to store it as a column in the `by_country` data frame. Storing related objects in columns is a key part of the value of data frames, and why I think list-columns are such a good idea. In the course of working with these countries, we are going to have lots of lists where we have one element per country. So why not store them all together in one data frame?\n\nIn other words, instead of creating a new object in the global environment, we're going to create a new variable in the `by_country` data frame. That's a job for `dplyr::mutate()`:\n\n```{r}\nby_country <- by_country %>% \n  mutate(model = map(data, country_model))\nby_country\n```\n\nThis has a big advantage: because all the related objects are stored together, you don't need to manually keep them in sync when you filter or arrange. The semantics of the data frame takes care of that for you:\n\n```{r}\nby_country %>% \n  filter(continent == \"Europe\")\nby_country %>% \n  arrange(continent, country)\n```\n\nIf your list of data frames and list of models were separate objects, you have to remember that whenever you re-order or subset one vector, you need to re-order or subset all the others in order to keep them in sync. If you forget, your code will continue to work, but it will give the wrong answer!\n\n### Unnesting\n\nPreviously we computed the residuals of a single model with a single dataset. Now we have 142 data frames and 142 models. To compute the residuals, we need to call `add_residuals()` with each model-data pair:\n\n```{r}\nby_country <- by_country %>% \n  mutate(\n    resids = map2(data, model, add_residuals)\n  )\nby_country\n```\n\nBut how you can plot a list of data frames? Instead of struggling to answer that question, let's turn the list of data frames back into a regular data frame. Previously we used `nest()` to turn a regular data frame into an nested data frame, and now we do the opposite with `unnest()`:\n\n```{r}\nresids <- unnest(by_country, resids)\nresids\n```\n\nNote that each regular column is repeated one for each row in the nested column.\n\nNow we have regular data frame, we can plot the residuals:\n\n```{r}\nresids %>% \n  ggplot(aes(year, resid)) +\n    geom_line(aes(group = country), alpha = 1 / 3) + \n    geom_smooth(se = FALSE)\n\n```\n\nFacetting by continent is particularly revealing:\n \n```{r}\nresids %>% \n  ggplot(aes(year, resid, group = country)) +\n    geom_line(alpha = 1 / 3) + \n    facet_wrap(~continent)\n```\n\nIt looks like we've missed some mild patterns. There's also something interesting going on in Africa: we see some very large residuals which suggests our model isn't fitting so well there. We'll explore that more in the next section, attacking it from a slightly different angle.\n\n### Model quality\n\nInstead of looking at the residuals from the model, we could look at some general measurements of model quality. You learned how to compute some specific measures in the previous practice. Here we'll show a different approach using the broom package. The broom package provides a general set of functions to turn models into tidy data. Here we'll use `broom::glance()` to extract some model quality metrics. If we apply it to a model, we get a data frame with a single row:\n\n```{r}\nbroom::glance(kenya_mod)\n```\n\nWe can use `mutate()` and `unnest()` to create a data frame with a row for each country:\n\n```{r}\nby_country %>% \n  mutate(glance = map(model, broom::glance)) %>% \n  unnest(glance)\n```\n\nThis isn't quite the output we want, because it still includes all the list columns. This is default behaviour when `unnest()` works on single row data frames. To suppress these columns we use `.drop = TRUE`:\n\n```{r}\nglance <- by_country %>% \n  mutate(glance = map(model, broom::glance)) %>% \n  unnest(glance, .drop = TRUE)\nglance\n```\n\n(Pay attention to the variables that aren't printed: there's a lot of useful stuff there.)\n\nWith this data frame in hand, we can start to look for models that don't fit well:\n\n```{r}\nglance %>% \n  arrange(r.squared)\n```\n\nThe worst models all appear to be in Africa. Let's double check that with a plot. Here we have a relatively small number of observations and a discrete variable, so `geom_jitter()` is effective:\n\n```{r}\nglance %>% \n  ggplot(aes(continent, r.squared)) + \n    geom_jitter(width = 0.5)\n```\n\nWe could pull out the countries with particularly bad $R^2$ and plot the data:\n\n```{r}\nbad_fit <- filter(glance, r.squared < 0.25)\n\ngapminder %>% \n  semi_join(bad_fit, by = \"country\") %>% \n  ggplot(aes(year, lifeExp, colour = country)) +\n    geom_line()\n```\n\nWe see two main effects here: the tragedies of the HIV/AIDS epidemic and the Rwandan genocide.\n\n### Exercises\n\n1.  A linear trend seems to be slightly too simple for the overall trend.\n    Can you do better with a quadratic polynomial? How can you interpret\n    the coefficients of the quadratic? (Hint you might want to transform\n    `year` so that it has mean zero.)\n\n2.  Explore other methods for visualising the distribution of $R^2$ per\n    continent. You might want to try the ggbeeswarm package, which provides \n    similar methods for avoiding overlaps as jitter, but uses deterministic\n    methods.\n\n3.  To create the last plot (showing the data for the countries with the\n    worst model fits), we needed two steps: we created a data frame with\n    one row per country and then semi-joined it to the original dataset.\n    It's possible avoid this join if we use `unnest()` instead of \n    `unnest(.drop = TRUE)`. How?\n\n## List-columns\n\nNow that you've seen a basic workflow for managing many models, let's dive back into some of the details. In this section, we'll explore the list-column data structure in a little more detail. It's only recently that I've really appreciated the idea of the list-column. List-columns are implicit in the definition of the data frame: a data frame is a named list of equal length vectors. A list is a vector, so it's always been legitimate to use a list as a column of a data frame. However, base R doesn't make it easy to create list-columns, and `data.frame()` treats a list as a list of columns:.\n\n```{r}\ndata.frame(x = list(1:3, 3:5))\n```\n\nYou can prevent `data.frame()` from doing this with `I()`, but the result doesn't print particularly well:\n\n```{r}\ndata.frame(\n  x = I(list(1:3, 3:5)), \n  y = c(\"1, 2\", \"3, 4, 5\")\n)\n```\n\nTibble alleviates this problem by being lazier (`tibble()` doesn't modify its inputs) and by providing a better print method:\n\n```{r}\ntibble(\n  x = list(1:3, 3:5), \n  y = c(\"1, 2\", \"3, 4, 5\")\n)\n```\n\nIt's even easier with `tribble()` as it can automatically work out that you need a list:\n\n```{r}\ntribble(\n   ~x, ~y,\n  1:3, \"1, 2\",\n  3:5, \"3, 4, 5\"\n)\n```\n\nList-columns are often most useful as intermediate data structure. They're hard to work with directly, because most R functions work with atomic vectors or data frames, but the advantage of keeping related items together in a data frame is worth a little hassle.\n\nGenerally there are three parts of an effective list-column pipeline:\n\n1.  You create the list-column using one of `nest()`, `summarise()` + `list()`,\n    or `mutate()` + a map function, as described in [Creating list-columns].\n\n2.  You create other intermediate list-columns by transforming existing\n    list columns with `map()`, `map2()` or `pmap()`. For example, \n    in the case study above, we created a list-column of models by transforming\n    a list-column of data frames.\n    \n3.  You simplify the list-column back down to a data frame or atomic vector,\n    as described in [Simplifying list-columns].\n\n## Creating list-columns\n\nTypically, you won't create list-columns with `tibble()`. Instead, you'll create them from regular columns, using one of three methods: \n\n1.  With `tidyr::nest()` to convert a grouped data frame into a nested data \n    frame where you have list-column of data frames.\n    \n2.  With `mutate()` and vectorised functions that return a list.\n\n3.  With `summarise()` and summary functions that return multiple results. \n\nAlternatively, you might create them from a named list, using `tibble::enframe()`.\n\nGenerally, when creating list-columns, you should make sure they're homogeneous: each element should contain the same type of thing. There are no checks to make sure this is true, but if you use purrr and remember what you've learned about type-stable functions, you should find it happens naturally.\n\n### With nesting\n\n`nest()` creates a nested data frame, which is a data frame with a list-column of data frames. In a nested data frame each row is a meta-observation: the other columns give variables that define the observation (like country and continent above), and the list-column of data frames gives the individual observations that make up the meta-observation.\n\nThere are two ways to use `nest()`. So far you've seen how to use it with a grouped data frame. When applied to a grouped data frame, `nest()` keeps the grouping columns as is, and bundles everything else into the list-column:\n\n```{r}\ngapminder %>% \n  group_by(country, continent) %>% \n  nest()\n```\n\nYou can also use it on an ungrouped data frame, specifying which columns you want to nest:\n\n```{r}\ngapminder %>% \n  nest(year:gdpPercap)\n```\n\n### From vectorised functions\n\nSome useful functions take an atomic vector and return a list. For example, in [strings] you learned about `stringr::str_split()` which takes a character vector and returns a list of character vectors. If you use that inside mutate, you'll get a list-column:\n\n```{r}\ndf <- tribble(\n  ~x1,\n  \"a,b,c\", \n  \"d,e,f,g\"\n) \n\ndf %>% \n  mutate(x2 = stringr::str_split(x1, \",\"))\n```\n\n`unnest()` knows how to handle these lists of vectors:\n\n```{r}\ndf %>% \n  mutate(x2 = stringr::str_split(x1, \",\")) %>% \n  unnest()\n```\n\n(If you find yourself using this pattern a lot, make sure to check out `tidyr:separate_rows()` which is a wrapper around this common pattern).\n\nAnother example of this pattern is using the `map()`, `map2()`, `pmap()` from purrr. For example, we could take the final example from [Invoking different functions] and rewrite it to use `mutate()`:\n\n```{r}\nsim <- tribble(\n  ~f,      ~params,\n  \"runif\", list(min = -1, max = -1),\n  \"rnorm\", list(sd = 5),\n  \"rpois\", list(lambda = 10)\n)\n\nsim %>%\n  mutate(sims = invoke_map(f, params, n = 10))\n```\n\nNote that technically `sim` isn't homogeneous because it contains both double and integer vectors. However, this is unlikely to cause many problems since integers and doubles are both numeric vectors.\n\n### From multivalued summaries\n\nOne restriction of `summarise()` is that it only works with summary functions that return a single value. That means that you can't use it with functions like `quantile()` that return a vector of arbitrary length:\n\n```{r, error = TRUE}\nmtcars %>% \n  group_by(cyl) %>% \n  summarise(q = quantile(mpg))\n```\n\nYou can however, wrap the result in a list! This obeys the contract of `summarise()`, because each summary is now a list (a vector) of length 1.\n\n```{r}\nmtcars %>% \n  group_by(cyl) %>% \n  summarise(q = list(quantile(mpg)))\n```\n\nTo make useful results with unnest, you'll also need to capture the probabilities:\n\n```{r}\nprobs <- c(0.01, 0.25, 0.5, 0.75, 0.99)\nmtcars %>% \n  group_by(cyl) %>% \n  summarise(p = list(probs), q = list(quantile(mpg, probs))) %>% \n  unnest()\n```\n\n### From a named list\n\nData frames with list-columns provide a solution to a common problem: what do you do if you want to iterate over both the contents of a list and its elements? Instead of trying to jam everything into one object, it's often easier to make a data frame: one column can contain the elements, and one column can contain the list.  An easy way to create such a data frame from a list is `tibble::enframe()`.  \n\n```{r}\nx <- list(\n  a = 1:5,\n  b = 3:4, \n  c = 5:6\n) \n\ndf <- enframe(x)\ndf\n```\n\nThe advantage of this structure is that it generalises in a straightforward way - names are useful if you have character vector of metadata, but don't help if you have other types of data, or multiple vectors.\n\nNow if you want to iterate over names and values in parallel, you can use `map2()`:\n\n```{r}\ndf %>% \n  mutate(\n    smry = map2_chr(name, value, ~ stringr::str_c(.x, \": \", .y[1]))\n  )\n```\n\n### Exercises\n\n1.  List all the functions that you can think of that take a atomic vector and \n    return a list.\n    \n2.  Brainstorm useful summary functions that, like `quantile()`, return\n    multiple values.\n    \n3.  What's missing in the following data frame? How does `quantile()` return\n    that missing piece? Why isn't that helpful here?\n\n    ```{r}\n    mtcars %>% \n      group_by(cyl) %>% \n      summarise(q = list(quantile(mpg))) %>% \n      unnest()\n    ```\n\n4.  What does this code do? Why might might it be useful?\n\n    ```{r, eval = FALSE}\n    mtcars %>% \n      group_by(cyl) %>% \n      summarise_each(funs(list))\n    ```\n\n## Simplifying list-columns\n\nTo apply the techniques of data manipulation and visualisation you've learned in this book, you'll need to simplify the list-column back to a regular column (an atomic vector), or set of columns. The technique you'll use to collapse back down to a simpler structure depends on whether you want a single value per element, or multiple values:\n\n1.  If you want a single value, use `mutate()` with `map_lgl()`, \n    `map_int()`, `map_dbl()`, and `map_chr()` to create an atomic vector.\n    \n2.  If you want many values, use `unnest()` to convert list-columns back\n    to regular columns, repeating the rows as many times as necessary.\n\nThese are described in more detail below.\n\n### List to vector\n\nIf you can reduce your list column to an atomic vector then it will be a regular column. For example, you can always summarise an object with its type and length, so this code will work regardless of what sort of list-column you have:\n\n```{r}\ndf <- tribble(\n  ~x,\n  letters[1:5],\n  1:3,\n  runif(5)\n)\n  \ndf %>% mutate(\n  type = map_chr(x, typeof),\n  length = map_int(x, length)\n)\n```\n\nThis is the same basic information that you get from the default tbl print method, but now you can use it for filtering. This is a useful technique if you have a heterogeneous list, and want to filter out the parts aren't working for you.\n\nDon't forget about the `map_*()` shortcuts - you can use `map_chr(x, \"apple\")` to extract the string stored in `apple` for each element of `x`. This is useful for pulling apart nested lists into regular columns. Use the `.null` argument to provide a value to use if the element is missing (instead of returning `NULL`):\n\n```{r}\ndf <- tribble(\n  ~x,\n  list(a = 1, b = 2),\n  list(a = 2, c = 4)\n)\ndf %>% mutate(\n  a = map_dbl(x, \"a\"),\n  b = map_dbl(x, \"b\", .null = NA_real_)\n)\n```\n\n### Unnesting\n\n`unnest()` works by repeating the regular columns once for each element of the list-column. For example, in the following very simple example we repeat the first row 4 times (because there the first element of `y` has length four), and the second row once:\n\n```{r}\ntibble(x = 1:2, y = list(1:4, 1)) %>% unnest(y)\n```\n\nThis means that you can't simultaneously unnest two columns that contain different number of elements:\n\n```{r, error = TRUE}\n# Ok, because y and z have the same number of elements in\n# every row\ndf1 <- tribble(\n  ~x, ~y,           ~z,\n   1, c(\"a\", \"b\"), 1:2,\n   2, \"c\",           3\n)\ndf1\ndf1 %>% unnest(y, z)\n\n# Doesn't work because y and z have different number of elements\ndf2 <- tribble(\n  ~x, ~y,           ~z,\n   1, \"a\",         1:2,  \n   2, c(\"b\", \"c\"),   3\n)\ndf2\ndf2 %>% unnest(y, z)\n```\n\nThe same principle applies when unnesting list-columns of data frames. You can unnest multiple list-cols as long as all the data frames in each row have the same number of rows.\n\n### Exercises\n\n1.  Why might the `lengths()` function be useful for creating atomic\n    vector columns from list-columns?\n    \n2.  List the most common types of vector found in a data frame. What makes\n    lists different?\n\n## Making tidy data with broom\n\nThe broom package provides three general tools for turning models into tidy data frames:\n\n1.  `broom::glance(model)` returns a row for each model. Each column gives a \n    model summary: either a measure of model quality, or complexity, or a \n    combination of the two.\n   \n2.  `broom::tidy(model)` returns a row for each coefficient in the model. Each \n    column gives information about the estimate or its variability.\n    \n3.  `broom::augment(model, data)` returns a row for each row in `data`, adding\n    extra values like residuals, and influence statistics.\n\n",
    "created" : 1497283035848.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1002596668",
    "id" : "3EA6FEF6",
    "lastKnownWriteTime" : 1497283941,
    "last_content_update" : 1497283941455,
    "path" : "C:/Users/adam_/Dropbox (Personal)/Brown/NAMBARI/R Course/Exercises/Day3.Rmd",
    "project_path" : "Day3.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}